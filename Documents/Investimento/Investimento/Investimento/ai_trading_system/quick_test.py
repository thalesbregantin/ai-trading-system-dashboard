#!/usr/bin/env python3
"""
Teste r√°pido do sistema antes de operar com dinheiro real
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio do projeto
sys.path.append(str(Path(__file__).parent))

def test_system():
    """Testa componentes principais"""
    
    print("üß™ TESTE R√ÅPIDO DO SISTEMA")
    print("=" * 50)
    
    # 1. Teste de importa√ß√µes
    print("1Ô∏è‚É£ Testando importa√ß√µes...")
    try:
        from core.config import TradingConfig
        from core.ai_trader_dqn import AITrader
        from core.hybrid_trading_system import HybridTradingSystem
        from core.binance_ai_bot import BinanceAIBot
        print("‚úÖ Todas as importa√ß√µes OK")
    except Exception as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    
    # 2. Teste de configura√ß√£o
    print("\n2Ô∏è‚É£ Testando configura√ß√£o...")
    try:
        config = TradingConfig()
        print(f"‚úÖ Configura√ß√£o carregada")
        print(f"   ‚Ä¢ Live Trading: {config.LIVE_TRADING}")
        print(f"   ‚Ä¢ Testnet Mode: {config.TESTNET_MODE}")
        print(f"   ‚Ä¢ API Key: {config.BINANCE_API_KEY[:15]}...")
    except Exception as e:
        print(f"‚ùå Erro de configura√ß√£o: {e}")
        return False
    
    # 3. Teste de conex√£o Binance
    print("\n3Ô∏è‚É£ Testando conex√£o Binance...")
    try:
        bot = BinanceAIBot(config)
        if bot.connect():
            print("‚úÖ Conex√£o com Binance OK")
            
            # Verifica saldo
            balance = bot.get_balance()
            if balance:
                print(f"üí∞ Saldo USDT: ${balance.get('USDT', 0):.2f}")
            
        else:
            print("‚ùå Falha na conex√£o com Binance")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # 4. Teste de sistema h√≠brido
    print("\n4Ô∏è‚É£ Testando sistema h√≠brido...")
    try:
        hybrid = HybridTradingSystem()
        print("‚úÖ Sistema h√≠brido inicializado")
    except Exception as e:
        print(f"‚ùå Erro no sistema h√≠brido: {e}")
        return False
    
    print("\nüéâ TODOS OS TESTES PASSARAM!")
    print("‚úÖ Sistema pronto para operar!")
    return True

def show_next_steps():
    """Mostra pr√≥ximos passos"""
    
    print("\nüöÄ PR√ìXIMOS PASSOS:")
    print("=" * 50)
    print("1Ô∏è‚É£ Treinar AI (recomendado):")
    print("   python main.py --mode train --episodes 10")
    print()
    print("2Ô∏è‚É£ Ver dashboard:")
    print("   python main.py --mode dashboard")
    print()
    print("3Ô∏è‚É£ Iniciar trading (CUIDADO - DINHEIRO REAL!):")
    print("   python main.py --mode live --env prod")
    print()
    print("‚ö†Ô∏è IMPORTANTE:")
    print("   ‚Ä¢ Voc√™ tem $100 na conta")
    print("   ‚Ä¢ Sistema est√° em MODO LIVE")
    print("   ‚Ä¢ Monitore sempre via dashboard")
    print("   ‚Ä¢ Max 2% por trade = $2 por opera√ß√£o")

if __name__ == "__main__":
    success = test_system()
    
    if success:
        show_next_steps()
        
        print("\nü§î O que voc√™ quer fazer agora?")
        print("A) Treinar AI primeiro (recomendado)")
        print("B) Ver dashboard")
        print("C) Iniciar trading direto")
        
        choice = input("\nEscolha (A/B/C): ").upper().strip()
        
        if choice == "A":
            print("üéì Iniciando treinamento da AI...")
            import subprocess
            subprocess.run(["python", "main.py", "--mode", "train", "--episodes", "10"])
        elif choice == "B":
            print("üìä Abrindo dashboard...")
            import subprocess
            subprocess.run(["python", "main.py", "--mode", "dashboard"])
        elif choice == "C":
            confirm = input("‚ö†Ô∏è CONFIRMA trading com dinheiro real? Digite 'SIM': ")
            if confirm == "SIM":
                print("üöÄ Iniciando trading ao vivo...")
                import subprocess
                subprocess.run(["python", "main.py", "--mode", "live", "--env", "prod"])
            else:
                print("‚ùå Trading cancelado")
    else:
        print("\n‚ùå Sistema n√£o est√° pronto!")
        print("üí° Verifique as configura√ß√µes e tente novamente")
