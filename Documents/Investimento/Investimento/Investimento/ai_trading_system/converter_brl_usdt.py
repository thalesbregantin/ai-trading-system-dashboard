#!/usr/bin/env python3
"""
Conversor BRL para USDT na Binance
Ajuda a converter seus R$ 100 para USDT para come√ßar o trading
"""

import ccxt
from datetime import datetime

# Credenciais
API_KEY = "Jsga4pAg9nndc0JmoWVt9w8rd9xQHxNFK7oxn11lKWtwS86MpruPbEdGXnkdkOzM"
API_SECRET = "7q8w7cWMkUvytSG1bFzYOosRzLrl4AOWk6v3Q1EMYOQcDer0R88EL5b7TP5opU2M"

def converter_brl_para_usdt():
    """Converte BRL para USDT para come√ßar o trading"""
    print("üí± CONVERSOR BRL ‚Üí USDT")
    print("=" * 40)
    
    try:
        # Conecta √† Binance
        exchange = ccxt.binance({
            'apiKey': API_KEY,
            'secret': API_SECRET,
            'enableRateLimit': True,
            'options': {'defaultType': 'spot'}
        })
        
        # Verifica saldo atual
        balance = exchange.fetch_balance()
        saldo_brl = balance.get('BRL', {}).get('free', 0)
        saldo_usdt = balance.get('USDT', {}).get('free', 0)
        
        print(f"üí∞ Saldo atual:")
        print(f"   BRL: R$ {saldo_brl:.2f}")
        print(f"   USDT: $ {saldo_usdt:.2f}")
        
        if saldo_brl <= 0:
            print("‚ùå Voc√™ n√£o tem BRL suficiente para converter")
            return
        
        # Verifica se existe o par BRL/USDT
        try:
            ticker_brl_usdt = exchange.fetch_ticker('BRL/USDT')
            preco_brl_usdt = ticker_brl_usdt['last']
            print(f"üìä Taxa de c√¢mbio BRL/USDT: {preco_brl_usdt:.4f}")
            
            # Calcula quanto USDT voc√™ pode comprar
            usdt_disponivel = saldo_brl * preco_brl_usdt
            print(f"üíµ Com R$ {saldo_brl:.2f} voc√™ pode comprar: $ {usdt_disponivel:.2f} USDT")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Par BRL/USDT n√£o dispon√≠vel: {e}")
            
            # Tenta via BTC
            try:
                print("\nüîÑ Tentando convers√£o via BTC...")
                ticker_brl_btc = exchange.fetch_ticker('BRL/BTC')
                ticker_btc_usdt = exchange.fetch_ticker('BTC/USDT')
                
                preco_brl_btc = ticker_brl_btc['last']
                preco_btc_usdt = ticker_btc_usdt['last']
                
                print(f"üìä BRL/BTC: {preco_brl_btc:.8f}")
                print(f"üìä BTC/USDT: $ {preco_btc_usdt:.2f}")
                
                # Calcula convers√£o indireta
                btc_disponivel = saldo_brl * preco_brl_btc
                usdt_disponivel = btc_disponivel * preco_btc_usdt
                
                print(f"üíµ Convers√£o indireta BRL ‚Üí BTC ‚Üí USDT:")
                print(f"   R$ {saldo_brl:.2f} ‚Üí {btc_disponivel:.8f} BTC ‚Üí $ {usdt_disponivel:.2f} USDT")
                
            except Exception as e2:
                print(f"‚ùå Erro na convers√£o via BTC: {e2}")
                return
        
        # Pergunta se quer fazer a convers√£o
        print(f"\nü§î IMPORTANTE:")
        print(f"   Para usar o sistema de trading AI, voc√™ precisa de USDT")
        print(f"   Seus R$ {saldo_brl:.2f} podem virar aproximadamente $ {usdt_disponivel:.2f} USDT")
        
        print(f"\n‚ö†Ô∏è ATEN√á√ÉO:")
        print(f"   Esta convers√£o usa dinheiro REAL!")
        print(f"   O trading tamb√©m usa dinheiro REAL!")
        print(f"   Pode haver perdas!")
        
        confirmacao = input("\n‚ùì Quer fazer a convers√£o BRL ‚Üí USDT? (digite 'CONFIRMO'): ")
        
        if confirmacao != 'CONFIRMO':
            print("‚ùå Convers√£o cancelada")
            print("üí° Voc√™ pode fazer isso manualmente no app da Binance tamb√©m")
            return
        
        # Executa a convers√£o (CUIDADO - DINHEIRO REAL!)
        print("\nüîÑ Executando convers√£o...")
        
        try:
            # Tenta ordem direta BRL/USDT
            try:
                amount_to_convert = saldo_brl * 0.99  # Deixa um pouco de margem
                order = exchange.create_market_sell_order('BRL/USDT', amount_to_convert)
                print(f"‚úÖ Convers√£o BRL ‚Üí USDT executada!")
                print(f"üìã ID da ordem: {order['id']}")
                
            except:
                # Fallback: BRL ‚Üí BTC ‚Üí USDT
                print("üîÑ Tentando convers√£o via BTC...")
                
                # Primeiro: BRL ‚Üí BTC
                amount_brl = saldo_brl * 0.99
                order1 = exchange.create_market_sell_order('BRL/BTC', amount_brl)
                print(f"‚úÖ Primeira etapa: BRL ‚Üí BTC (ID: {order1['id']})")
                
                # Aguarda um pouco
                import time
                time.sleep(2)
                
                # Segundo: BTC ‚Üí USDT
                balance_novo = exchange.fetch_balance()
                saldo_btc = balance_novo.get('BTC', {}).get('free', 0)
                
                if saldo_btc > 0:
                    order2 = exchange.create_market_sell_order('BTC/USDT', saldo_btc)
                    print(f"‚úÖ Segunda etapa: BTC ‚Üí USDT (ID: {order2['id']})")
                
            # Verifica resultado final
            time.sleep(3)
            balance_final = exchange.fetch_balance()
            saldo_usdt_final = balance_final.get('USDT', {}).get('free', 0)
            
            print(f"\nüéâ CONVERS√ÉO CONCLU√çDA!")
            print(f"üí∞ Novo saldo USDT: $ {saldo_usdt_final:.2f}")
            print(f"üí° Agora voc√™ pode usar o sistema de trading AI!")
            
        except Exception as e:
            print(f"‚ùå Erro na convers√£o: {e}")
            print("üí° Tente fazer a convers√£o manualmente no app da Binance")
    
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")

def verificar_status_pos_conversao():
    """Verifica o status ap√≥s convers√£o"""
    print("\nüîç VERIFICANDO STATUS AP√ìS CONVERS√ÉO...")
    
    try:
        exchange = ccxt.binance({
            'apiKey': API_KEY,
            'secret': API_SECRET,
            'enableRateLimit': True,
        })
        
        balance = exchange.fetch_balance()
        
        print(f"üí∞ Status atual:")
        print(f"   BRL: R$ {balance.get('BRL', {}).get('free', 0):.2f}")
        print(f"   USDT: $ {balance.get('USDT', {}).get('free', 0):.2f}")
        print(f"   BTC: {balance.get('BTC', {}).get('free', 0):.8f}")
        print(f"   ETH: {balance.get('ETH', {}).get('free', 0):.6f}")
        
        saldo_usdt = balance.get('USDT', {}).get('free', 0)
        
        if saldo_usdt >= 10:
            print(f"\n‚úÖ PRONTO PARA TRADING!")
            print(f"üí° Voc√™ tem $ {saldo_usdt:.2f} USDT para come√ßar!")
            print(f"ü§ñ Pode rodar: python main.py --mode live")
        else:
            print(f"\n‚ö†Ô∏è Saldo USDT baixo: $ {saldo_usdt:.2f}")
            print(f"üí° M√≠nimo recomendado: $ 10.00 USDT")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    converter_brl_para_usdt()
    verificar_status_pos_conversao()
