"""
BINANCE TRADING EXECUTOR V2.0 - IMPLEMENTA√á√ÉO OFICIAL
=====================================================

Baseado na documenta√ß√£o oficial da Binance API v3
Implementa todas as melhores pr√°ticas de seguran√ßa e performance

PRINCIPAIS MELHORIAS:
- Autentica√ß√£o HMAC-SHA256 correta
- Rate limiting respeitado
- Error handling robusto
- Endpoints oficiais v3
- Timeouts e retry logic
- Logging completo
"""

import ccxt
import hmac
import hashlib
import time
import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import logging
from typing import Dict, Optional, Tuple, List

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('binance_trading.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BinanceExecutorV2:
    """
    Executor avan√ßado para trading na Binance
    Implementa todas as melhores pr√°ticas da documenta√ß√£o oficial
    """
    
    def __init__(self, api_key: str = None, api_secret: str = None, testnet: bool = True):
        """
        Inicializa o executor com configura√ß√µes otimizadas
        """
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        
        # URLs base oficiais (conforme documenta√ß√£o)
        if testnet:
            self.base_url = "https://testnet.binance.vision"
            logger.info("üß™ Modo TESTNET ativado")
        else:
            # URLs oficiais com melhor performance
            self.base_urls = [
                "https://api.binance.com",
                "https://api1.binance.com",  # Melhor performance
                "https://api2.binance.com",  # Melhor performance
                "https://api3.binance.com",  # Melhor performance
                "https://api4.binance.com"   # Melhor performance
            ]
            self.base_url = self.base_urls[0]  # Usar principal por padr√£o
            logger.warning("üö® Modo PRODU√á√ÉO ativado - Dinheiro real!")
        
        # Configura√ß√µes de trading
        self.symbols = ['BTCUSDT', 'ETHUSDT']  # Formato correto
        self.capital_per_trade = 50.0
        self.stop_loss_pct = 0.10
        self.take_profit_pct = 0.15
        
        # Rate limiting (conforme documenta√ß√£o oficial)
        self.request_weight_limit = 6000  # Por minuto
        self.order_count_limit = 100      # Por 10 segundos
        self.current_weight = 0
        self.last_weight_reset = time.time()
        
        # Headers padr√£o
        self.headers = {
            'X-MBX-APIKEY': self.api_key,
            'Content-Type': 'application/json'
        }
        
        # Inicializa CCXT como backup
        try:
            self.exchange = ccxt.binance({
                'apiKey': api_key,
                'secret': api_secret,
                'sandbox': testnet,
                'enableRateLimit': True,
                'timeout': 10000,  # 10 segundos timeout
            })
        except Exception as e:
            logger.error(f"Erro ao inicializar CCXT: {e}")
            self.exchange = None
        
        # Estado do sistema
        self.orders_history = []
        self.positions = {}
        self.server_time_offset = 0
        
        logger.info(f"‚úÖ BinanceExecutorV2 inicializado")
        logger.info(f"üí∞ Capital por trade: ${self.capital_per_trade}")
        logger.info(f"üõë Stop Loss: {self.stop_loss_pct*100}%")
        logger.info(f"üéØ Take Profit: {self.take_profit_pct*100}%")

    def _create_signature(self, params: str) -> str:
        """
        Cria assinatura HMAC-SHA256 conforme documenta√ß√£o oficial
        """
        return hmac.new(
            self.api_secret.encode('utf-8'),
            params.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

    def _get_server_time(self) -> int:
        """
        Obt√©m hor√°rio do servidor para sincroniza√ß√£o
        Endpoint: GET /api/v3/time (Weight: 1)
        """
        try:
            response = requests.get(f"{self.base_url}/api/v3/time", timeout=5)
            if response.status_code == 200:
                server_time = response.json()['serverTime']
                local_time = int(time.time() * 1000)
                self.server_time_offset = server_time - local_time
                return server_time
            else:
                logger.error(f"Erro ao obter server time: {response.status_code}")
                return int(time.time() * 1000)
        except Exception as e:
            logger.error(f"Erro na sincroniza√ß√£o de tempo: {e}")
            return int(time.time() * 1000)

    def _update_rate_limit(self, weight: int):
        """
        Atualiza contadores de rate limiting
        """
        current_time = time.time()
        
        # Reset weight se passou 1 minuto
        if current_time - self.last_weight_reset > 60:
            self.current_weight = 0
            self.last_weight_reset = current_time
        
        self.current_weight += weight
        
        # Verifica se est√° pr√≥ximo do limite
        if self.current_weight > self.request_weight_limit * 0.8:
            logger.warning(f"‚ö†Ô∏è Rate limit alto: {self.current_weight}/{self.request_weight_limit}")

    def _make_request(self, method: str, endpoint: str, params: dict = None, signed: bool = False) -> dict:
        """
        Faz requisi√ß√£o HTTP com todas as valida√ß√µes oficiais
        """
        if params is None:
            params = {}
        
        # Adiciona timestamp para endpoints assinados
        if signed:
            timestamp = self._get_server_time()
            params['timestamp'] = timestamp
            params['recvWindow'] = 5000  # 5 segundos (m√°x 60000)
        
        # Constr√≥i query string
        query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
        
        # Adiciona assinatura se necess√°rio
        if signed and self.api_secret:
            signature = self._create_signature(query_string)
            query_string += f"&signature={signature}"
        
        # URL completa
        url = f"{self.base_url}{endpoint}"
        if query_string:
            url += f"?{query_string}"
        
        try:
            if method.upper() == 'GET':
                response = requests.get(url, headers=self.headers, timeout=10)
            elif method.upper() == 'POST':
                response = requests.post(url, headers=self.headers, timeout=10)
            elif method.upper() == 'DELETE':
                response = requests.delete(url, headers=self.headers, timeout=10)
            else:
                raise ValueError(f"M√©todo HTTP n√£o suportado: {method}")
            
            # Atualiza rate limiting com headers de resposta
            if 'X-MBX-USED-WEIGHT-1M' in response.headers:
                used_weight = int(response.headers['X-MBX-USED-WEIGHT-1M'])
                self.current_weight = used_weight
            
            # Verifica status da resposta
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 418:
                logger.error("üö´ IP banido temporariamente")
                raise Exception("IP banned")
            elif response.status_code == 429:
                logger.error("‚ö†Ô∏è Rate limit excedido")
                time.sleep(5)  # Espera 5 segundos
                raise Exception("Rate limit exceeded")
            else:
                logger.error(f"Erro HTTP {response.status_code}: {response.text}")
                return {}
        
        except requests.exceptions.Timeout:
            logger.error("‚è∞ Timeout na requisi√ß√£o")
            return {}
        except Exception as e:
            logger.error(f"Erro na requisi√ß√£o: {e}")
            return {}

    def get_account_info(self) -> dict:
        """
        Obt√©m informa√ß√µes da conta
        Endpoint: GET /api/v3/account (Weight: 20)
        """
        logger.info("üìä Obtendo informa√ß√µes da conta...")
        account_info = self._make_request('GET', '/api/v3/account', signed=True)
        
        if account_info:
            # Extrai saldos relevantes
            balances = {}
            for balance in account_info.get('balances', []):
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                
                if free > 0 or locked > 0:
                    balances[asset] = {
                        'free': free,
                        'locked': locked,
                        'total': free + locked
                    }
            
            logger.info(f"üí∞ Saldos n√£o-zero: {len(balances)} ativos")
            return {
                'balances': balances,
                'canTrade': account_info.get('canTrade', False),
                'canWithdraw': account_info.get('canWithdraw', False),
                'canDeposit': account_info.get('canDeposit', False)
            }
        
        return {}

    def get_symbol_info(self, symbol: str) -> dict:
        """
        Obt√©m informa√ß√µes do s√≠mbolo
        Endpoint: GET /api/v3/exchangeInfo (Weight: 20)
        """
        exchange_info = self._make_request('GET', '/api/v3/exchangeInfo')
        
        if exchange_info:
            for symbol_info in exchange_info.get('symbols', []):
                if symbol_info['symbol'] == symbol:
                    return {
                        'symbol': symbol_info['symbol'],
                        'status': symbol_info['status'],
                        'baseAsset': symbol_info['baseAsset'],
                        'quoteAsset': symbol_info['quoteAsset'],
                        'filters': symbol_info['filters'],
                        'permissions': symbol_info.get('permissions', [])
                    }
        
        return {}

    def get_ticker_price(self, symbol: str) -> float:
        """
        Obt√©m pre√ßo atual do s√≠mbolo
        Endpoint: GET /api/v3/ticker/price (Weight: 2)
        """
        ticker = self._make_request('GET', '/api/v3/ticker/price', {'symbol': symbol})
        
        if ticker and 'price' in ticker:
            return float(ticker['price'])
        
        return 0.0

    def get_klines(self, symbol: str, interval: str = '1d', limit: int = 50) -> pd.DataFrame:
        """
        Obt√©m dados de candlesticks
        Endpoint: GET /api/v3/klines (Weight: 2)
        """
        params = {
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        }
        
        klines = self._make_request('GET', '/api/v3/klines', params)
        
        if klines:
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'count', 'taker_buy_volume', 
                'taker_buy_quote_volume', 'ignore'
            ])
            
            # Converte para tipos corretos
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            
            return df
        
        return pd.DataFrame()

    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Calcula indicadores t√©cnicos otimizados
        """
        if df.empty or len(df) < 21:
            return df
        
        # SMA
        df['sma_9'] = df['close'].rolling(window=9).mean()
        df['sma_21'] = df['close'].rolling(window=21).mean()
        
        # RSI otimizado
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # Volume m√©dio
        df['volume_sma'] = df['volume'].rolling(window=10).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        # MACD
        ema_12 = df['close'].ewm(span=12).mean()
        ema_26 = df['close'].ewm(span=26).mean()
        df['macd'] = ema_12 - ema_26
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        
        return df

    def generate_trading_signal(self, symbol: str) -> str:
        """
        Gera sinal de trading baseado em an√°lise t√©cnica avan√ßada
        """
        try:
            # Obt√©m dados hist√≥ricos
            df = self.get_klines(symbol)
            if df.empty:
                return "HOLD"
            
            # Calcula indicadores
            df = self.calculate_technical_indicators(df)
            latest = df.iloc[-1]
            
            # Condi√ß√µes de compra (estrat√©gia momentum otimizada)
            buy_conditions = [
                latest['close'] > latest['sma_9'],           # Tend√™ncia de alta
                latest['sma_9'] > latest['sma_21'],          # Momentum positivo
                latest['rsi'] > 30 and latest['rsi'] < 70,   # RSI em zona neutra
                latest['volume_ratio'] > 1.2,               # Volume acima da m√©dia
                latest['macd'] > latest['macd_signal']       # MACD positivo
            ]
            
            # Condi√ß√µes de venda
            sell_conditions = [
                latest['close'] < latest['sma_9'],           # Tend√™ncia de baixa
                latest['rsi'] > 70,                          # RSI sobrecomprado
                latest['macd'] < latest['macd_signal']       # MACD negativo
            ]
            
            buy_score = sum(buy_conditions)
            sell_score = sum(sell_conditions)
            
            if buy_score >= 4:  # Maioria das condi√ß√µes
                return "BUY"
            elif sell_score >= 2:  # Algumas condi√ß√µes de venda
                return "SELL"
            else:
                return "HOLD"
        
        except Exception as e:
            logger.error(f"Erro ao gerar sinal para {symbol}: {e}")
            return "HOLD"

    def place_market_order(self, symbol: str, side: str, quantity: float) -> dict:
        """
        Coloca ordem de mercado
        Endpoint: POST /api/v3/order (Weight: 1)
        """
        params = {
            'symbol': symbol,
            'side': side.upper(),
            'type': 'MARKET',
            'quantity': f"{quantity:.6f}",
            'newOrderRespType': 'FULL'  # Resposta completa
        }
        
        logger.info(f"üõí Colocando ordem {side} para {symbol}: {quantity}")
        
        if not self.testnet:
            confirm = input(f"‚ö†Ô∏è ORDEM REAL! Confirma {side} {quantity} {symbol}? (yes/no): ")
            if confirm.lower() != 'yes':
                logger.info("‚ùå Ordem cancelada pelo usu√°rio")
                return {}
        
        order_result = self._make_request('POST', '/api/v3/order', params, signed=True)
        
        if order_result and 'orderId' in order_result:
            logger.info(f"‚úÖ Ordem executada: ID {order_result['orderId']}")
            
            # Registra no hist√≥rico
            order_record = {
                'timestamp': datetime.now(),
                'symbol': symbol,
                'side': side,
                'type': 'MARKET',
                'quantity': float(order_result.get('executedQty', 0)),
                'price': float(order_result.get('fills', [{}])[0].get('price', 0)),
                'order_id': order_result['orderId'],
                'status': order_result['status']
            }
            
            self.orders_history.append(order_record)
            
            # Atualiza posi√ß√µes
            if side.upper() == 'BUY':
                self.positions[symbol] = order_record
            elif symbol in self.positions:
                del self.positions[symbol]
            
            return order_record
        
        return {}

    def run_trading_session(self):
        """
        Executa uma sess√£o completa de trading
        """
        logger.info("\n" + "="*60)
        logger.info(f"üöÄ INICIANDO SESS√ÉO DE TRADING - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("="*60)
        
        try:
            # 1. Verifica conectividade
            server_time = self._get_server_time()
            logger.info(f"‚è∞ Sincroniza√ß√£o com servidor: OK")
            
            # 2. Verifica conta
            account_info = self.get_account_info()
            if not account_info:
                logger.error("‚ùå N√£o foi poss√≠vel obter informa√ß√µes da conta")
                return
            
            logger.info(f"üë§ Conta ativa: {account_info.get('canTrade', False)}")
            
            # 3. Verifica saldo USDT
            usdt_balance = account_info.get('balances', {}).get('USDT', {}).get('free', 0)
            logger.info(f"üí∞ Saldo USDT dispon√≠vel: ${usdt_balance:.2f}")
            
            # 4. Analisa cada s√≠mbolo
            for symbol in self.symbols:
                try:
                    logger.info(f"\nüìä Analisando {symbol}...")
                    
                    # Gera sinal
                    signal = self.generate_trading_signal(symbol)
                    current_price = self.get_ticker_price(symbol)
                    
                    logger.info(f"   üí∞ Pre√ßo atual: ${current_price:,.2f}")
                    logger.info(f"   üìà Sinal: {signal}")
                    
                    # Executa a√ß√£o baseada no sinal
                    if signal == "BUY" and symbol not in self.positions:
                        if usdt_balance >= self.capital_per_trade:
                            quantity = self.capital_per_trade / current_price
                            self.place_market_order(symbol, 'BUY', quantity)
                            usdt_balance -= self.capital_per_trade
                        else:
                            logger.warning(f"‚ö†Ô∏è Saldo insuficiente para comprar {symbol}")
                    
                    elif signal == "SELL" and symbol in self.positions:
                        position = self.positions[symbol]
                        quantity = position['quantity']
                        self.place_market_order(symbol, 'SELL', quantity)
                
                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar {symbol}: {e}")
                    continue
            
            # 5. Relat√≥rio final
            self.show_portfolio_summary()
            
        except Exception as e:
            logger.error(f"‚ùå Erro na sess√£o de trading: {e}")
        
        logger.info(f"\n‚úÖ Sess√£o de trading conclu√≠da - {datetime.now().strftime('%H:%M:%S')}")

    def show_portfolio_summary(self):
        """
        Mostra resumo do portf√≥lio
        """
        logger.info("\n" + "="*40)
        logger.info("üìä RESUMO DO PORTF√ìLIO")
        logger.info("="*40)
        
        if self.positions:
            for symbol, position in self.positions.items():
                current_price = self.get_ticker_price(symbol)
                entry_price = position['price']
                quantity = position['quantity']
                
                current_value = current_price * quantity
                entry_value = entry_price * quantity
                pnl = current_value - entry_value
                pnl_pct = (pnl / entry_value) * 100
                
                logger.info(f"   ‚Ä¢ {symbol}:")
                logger.info(f"     Quantidade: {quantity:.6f}")
                logger.info(f"     Pre√ßo entrada: ${entry_price:.2f}")
                logger.info(f"     Pre√ßo atual: ${current_price:.2f}")
                logger.info(f"     P&L: ${pnl:+.2f} ({pnl_pct:+.2f}%)")
        else:
            logger.info("   Nenhuma posi√ß√£o aberta")
        
        # Hist√≥rico de trades
        if self.orders_history:
            completed_trades = [o for o in self.orders_history if 'pnl' in o]
            if completed_trades:
                total_pnl = sum(t['pnl'] for t in completed_trades)
                win_rate = len([t for t in completed_trades if t['pnl'] > 0]) / len(completed_trades) * 100
                
                logger.info(f"\n   üìà Total P&L: ${total_pnl:+.2f}")
                logger.info(f"   üéØ Taxa de acerto: {win_rate:.1f}%")
                logger.info(f"   üî¢ Total de trades: {len(completed_trades)}")

def main():
    """
    Fun√ß√£o principal - ponto de entrada do sistema
    """
    print("üöÄ BINANCE EXECUTOR V2.0 - IMPLEMENTA√á√ÉO OFICIAL")
    print("=" * 60)
    
    # Configura√ß√µes - ALTERE AQUI SUAS CHAVES
    API_KEY = "sua_api_key_aqui"
    API_SECRET = "sua_api_secret_aqui"
    TESTNET = True  # True = simula√ß√£o, False = dinheiro real
    
    if API_KEY == "sua_api_key_aqui":
        print("‚ùå Configure suas chaves API antes de usar!")
        print("üìñ Edite as vari√°veis API_KEY e API_SECRET")
        return
    
    try:
        # Inicializa executor
        executor = BinanceExecutorV2(
            api_key=API_KEY,
            api_secret=API_SECRET,
            testnet=TESTNET
        )
        
        # Executa sess√£o de trading
        executor.run_trading_session()
        
    except KeyboardInterrupt:
        logger.info("\nüëã Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")

if __name__ == "__main__":
    main()
