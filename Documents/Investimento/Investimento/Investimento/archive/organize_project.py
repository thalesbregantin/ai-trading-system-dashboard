#!/usr/bin/env python3
"""
Organizador do Projeto AI Trading
Identifica e organiza arquivos essenciais vs. experimentais
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

def organize_project():
    """Organiza o projeto mantendo apenas arquivos essenciais"""
    
    print("üßπ ORGANIZANDO PROJETO AI TRADING")
    print("=" * 50)
    
    # Arquivos ESSENCIAIS para o sistema funcionar
    essential_files = {
        # Core do sistema
        'ai_trader_dqn.py': 'core/',
        'hybrid_trading_system.py': 'core/',
        'binance_ai_bot.py': 'core/',
        'main.py': 'core/',
        'config.py': 'core/',
        
        # Dashboard
        'dashboard/main_dashboard.py': 'dashboard/',
        'dashboard/ai_trading_dashboard.py': 'dashboard/',
        'dashboard/.streamlit/': 'dashboard/.streamlit/',
        
        # Configura√ß√£o e setup
        '.env': 'config/',
        'requirements_ai_trading.txt': 'config/',
        
        # Scripts utilit√°rios
        'quick_setup.py': 'utils/',
        'test_binance_connection.py': 'utils/',
        'check_trading_permissions.py': 'utils/',
        'monitor_trading.py': 'utils/',
    }
    
    # Arquivos EXPERIMENTAIS/TESTE (mover para pasta archive)
    experimental_files = [
        'benchmark_vs_btc.py',
        'binance_testnet_executor.py',
        'crypto_sma_starter.py',
        'validation_out_of_sample.py',
        'binance_executor_*.py',
        'binance_r100_signals.py',
        'test_*.py',
        'simple_test.py',
        'quick_test.py',
        'run_*.py',
        'check_live.py',
        'status_live.py',
        'save_status.py',
    ]
    
    # Documenta√ß√£o (mover para docs)
    doc_files = [
        '*.md',
        '*.json',
        'reports/',
        'data/',
    ]
    
    print("üìã Arquivos identificados:")
    print(f"  ‚úÖ Essenciais: {len(essential_files)}")
    print(f"  üß™ Experimentais: {len(experimental_files)}")
    print(f"  üìÑ Documenta√ß√£o: {len(doc_files)}")
    
    return essential_files, experimental_files, doc_files

def create_new_structure():
    """Cria nova estrutura de diret√≥rios"""
    
    new_structure = {
        'ai_trading_system/': 'Sistema principal',
        'ai_trading_system/core/': 'Arquivos principais do sistema',
        'ai_trading_system/dashboard/': 'Interface web Streamlit',
        'ai_trading_system/config/': 'Configura√ß√µes e setup',
        'ai_trading_system/utils/': 'Scripts utilit√°rios',
        'ai_trading_system/logs/': 'Logs do sistema',
        'archive/': 'Arquivos experimentais',
        'docs/': 'Documenta√ß√£o e relat√≥rios',
    }
    
    print("\nüèóÔ∏è NOVA ESTRUTURA:")
    for folder, description in new_structure.items():
        print(f"  üìÅ {folder:<30} - {description}")
    
    return new_structure

def show_final_structure():
    """Mostra estrutura final organizada"""
    
    final_structure = """
üìÅ ai_trading_system/                 # Sistema Principal
‚îú‚îÄ‚îÄ üìÅ core/                         # N√∫cleo do Sistema
‚îÇ   ‚îú‚îÄ‚îÄ ü§ñ ai_trader_dqn.py          # Deep Q-Learning AI
‚îÇ   ‚îú‚îÄ‚îÄ üîÑ hybrid_trading_system.py  # Sistema H√≠brido AI+Momentum
‚îÇ   ‚îú‚îÄ‚îÄ üîó binance_ai_bot.py         # Bot de Trading Binance
‚îÇ   ‚îú‚îÄ‚îÄ üöÄ main.py                   # Orquestrador Principal
‚îÇ   ‚îî‚îÄ‚îÄ ‚öôÔ∏è config.py                 # Configura√ß√µes
‚îÇ
‚îú‚îÄ‚îÄ üìÅ dashboard/                    # Interface Web
‚îÇ   ‚îú‚îÄ‚îÄ üìä main_dashboard.py         # Dashboard Principal
‚îÇ   ‚îú‚îÄ‚îÄ üéØ ai_trading_dashboard.py   # Dashboard AI Espec√≠fico
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ .streamlit/               # Configura√ß√µes Streamlit
‚îÇ
‚îú‚îÄ‚îÄ üìÅ config/                       # Configura√ß√£o e Setup
‚îÇ   ‚îú‚îÄ‚îÄ üîê .env                      # Vari√°veis de Ambiente
‚îÇ   ‚îî‚îÄ‚îÄ üì¶ requirements.txt          # Depend√™ncias Python
‚îÇ
‚îú‚îÄ‚îÄ üìÅ utils/                        # Utilit√°rios
‚îÇ   ‚îú‚îÄ‚îÄ üîß quick_setup.py            # Setup R√°pido
‚îÇ   ‚îú‚îÄ‚îÄ üîç test_binance_connection.py # Teste API
‚îÇ   ‚îú‚îÄ‚îÄ üõ°Ô∏è check_trading_permissions.py # Verificar Permiss√µes
‚îÇ   ‚îî‚îÄ‚îÄ üìä monitor_trading.py        # Monitor em Tempo Real
‚îÇ
‚îî‚îÄ‚îÄ üìÅ logs/                         # Logs do Sistema
    ‚îú‚îÄ‚îÄ üìù trading_log_YYYYMMDD.log  # Logs de Trading
    ‚îî‚îÄ‚îÄ üìà ai_training.log           # Logs de Treinamento AI

üìÅ archive/                          # Arquivos Experimentais
‚îú‚îÄ‚îÄ üß™ test_files/                   # Scripts de teste
‚îú‚îÄ‚îÄ üî¨ experimental/                 # Experimentos
‚îî‚îÄ‚îÄ üìä old_analysis/                 # An√°lises antigas

üìÅ docs/                             # Documenta√ß√£o
‚îú‚îÄ‚îÄ üìã user_guides/                  # Guias do usu√°rio
‚îú‚îÄ‚îÄ üìä reports/                      # Relat√≥rios
‚îî‚îÄ‚îÄ üìù technical_docs/               # Documenta√ß√£o t√©cnica
"""
    
    print("\nüéØ ESTRUTURA FINAL ORGANIZADA:")
    print(final_structure)

if __name__ == "__main__":
    print("üóÇÔ∏è AN√ÅLISE DE ORGANIZA√á√ÉO DO PROJETO")
    print("=" * 60)
    
    # Analisa arquivos atuais
    essential, experimental, docs = organize_project()
    
    # Mostra nova estrutura
    new_structure = create_new_structure()
    
    # Mostra estrutura final
    show_final_structure()
    
    print("\nüí° PR√ìXIMAS A√á√ïES RECOMENDADAS:")
    print("1Ô∏è‚É£ Criar diret√≥rio 'ai_trading_system'")
    print("2Ô∏è‚É£ Mover arquivos essenciais para nova estrutura")
    print("3Ô∏è‚É£ Arquivar arquivos experimentais")
    print("4Ô∏è‚É£ Organizar documenta√ß√£o")
    print("5Ô∏è‚É£ Atualizar imports nos arquivos")
    print("6Ô∏è‚É£ Testar sistema na nova estrutura")
    
    choice = input("\n‚ùì Executar reorganiza√ß√£o? (s/n): ").lower().strip()
    if choice in ['s', 'sim', 'y', 'yes']:
        print("üöÄ Iniciando reorganiza√ß√£o...")
        # Aqui implementar√≠amos a reorganiza√ß√£o real
        print("‚ö†Ô∏è Reorganiza√ß√£o autom√°tica n√£o implementada por seguran√ßa.")
        print("üí° Execute manualmente seguindo a estrutura acima.")
    else:
        print("üëã Reorganiza√ß√£o cancelada.")
